#+TITLE: emacs config
#+AUTHOR: josh bairstow
#+EMAIL: joshbairstow@gmail.com

* Packages...
** Archive definitions
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (package-initialize)
#+END_SRC
** ELPA archive description
#+BEGIN_SRC emacs-lisp
  (when (not package-archive-contents)
    (package-refresh-contents))
#+END_SRC
** Package definitions
#+BEGIN_SRC emacs-lisp
 (defvar my-packages
  '(paredit
    clojure-mode
    clojure-mode-extra-font-locking
    cider
    smex
    projectile
    rainbow-delimiters
    magit
    gruvbox-theme))
#+END_SRC
** Package install
#+BEGIN_SRC emacs-lisp
  (dolist (p my-packages)
    (when (not (package-installed-p p))
      (package-install p)))
#+END_SRC

* Defaults...
** Sensible Defaults Repo
Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.
#+BEGIN_SRC emacs-lisp
  (load-file "~/git/sensible-defaults.el/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
#+END_SRC

* Evil Mode...
** Evil Mode Repo
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/git/evil")
  (require 'evil)
  (evil-mode 1)
#+END_SRC
** Adjustment for emacs end of line evals in evil mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/git/evil-adjust")
  (require 'evil-adjust)
  (evil-adjust)
#+END_SRC
** Bind 'jk' to return to normal state
#+BEGIN_SRC emacs-lisp
  (defun my-jk ()
    (interactive)
    (let* ((initial-key ?j)
          (final-key ?k)
          (timeout 0.5)
          (event (read-event nil nil timeout)))
      (if event
          ;; timeout met
          (if (and (characterp event) (= event final-key))
              (evil-normal-state)
            (insert initial-key)
            (push event unread-command-events))
        ;; timeout exceeded
        (insert initial-key))))

  (define-key evil-insert-state-map (kbd "j") 'my-jk)
#+END_SRC

* UI preferences...
** Tweak window appearance
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (blink-cursor-mode 0)
  (global-linum-mode 1)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC
** Default frame title
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC
** Theme set
#+BEGIN_SRC emacs-lisp
  (load-theme 'gruvbox-dark-soft t)
#+END_SRC
** No bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

* Editing...
** Parens settings
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Fancy lamdas
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC
** Current line highlight
#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode 1))
#+END_SRC
** Tab width
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC
** No hard tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

* Paredit
** Setup
#+BEGIN_SRC emacs-lisp
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+END_SRC

* ElDoc
** Setup
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

* Clojure
** Enable paredit for clojure
#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook 'enable-paredit-mode)
#+END_SRC
** Handle camel-case tokens
#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook 'subword-mode)
#+END_SRC
** Syntax highlighting
#+BEGIN_SRC emacs-lisp
  (require 'clojure-mode-extra-font-locking)
  (add-hook 'clojure-mode-hook
            (lambda ()
              (setq inferior-lisp-program "lein repl")
              (font-lock-add-keywords
              nil
              '(("(\\(facts?\\)"
                  (1 font-lock-keyword-face))
                ("(\\(background?\\)"
                  (1 font-lock-keyword-face))))
              (define-clojure-indent (fact 1))
              (define-clojure-indent (facts 1))))
#+END_SRC

* Cider
** Minibuffer docs for repl code
#+BEGIN_SRC emacs-lisp
  (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
#+END_SRC
** Switch to buffer on connection
#+BEGIN_SRC emacs-lisp
  (setq cider-repl-pop-to-buffer-on-connect t)
#+END_SRC
** Switch to buffer on error
#+BEGIN_SRC emacs-lisp
  (setq cider-show-error-buffer t)
  (setq cider-auto-select-error-buffer t)
#+END_SRC
** Store history
#+BEGIN_SRC emacs-lisp
  (setq cider-repl-history-file "~/.emacs.d/cider-history")
#+END_SRC
** Wrap history navigation
#+BEGIN_SRC emacs-lisp
  (setq cider-repl-wrap-history t)
#+END_SRC
** Enable paredit within repl
#+BEGIN_SRC emacs-lisp
  (add-hook 'cider-repl-mode-hook 'paredit-mode)
#+END_SRC
** Additional extensions for clojure mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))
#+END_SRC
